local love = require("love")
local backend = {}

if love then
    backend.graphics = {
        rectangle = love.graphics.rectangle,
        set_color = love.graphics.setColor,

        Canvas = love.graphics.Canvas,
        Drawable = love.graphics.Drawable,
        Font = love.graphics.Font,
        FrameBuffer = love.graphics.Framebuffer,
        Image = love.graphics.Image,
        Mesh = love.graphics.Mesh,
        ParticleSystem = love.graphics.ParticleSystem,
        PixelEffect = love.graphics.PixelEffect,
        Quad = love.graphics.Quad,
        Shader = love.graphics.Shader,
        SpriteBatch = love.graphics.SpriteBatch,
        Text = love.graphics.Text,
        Texture = love.graphics.Texture,
        Video = love.graphics.Video,

        arc = love.graphics.arc,
        circle = love.graphics.circle,
        clear = love.graphics.clear,
        discard = love.graphics.discard,
        draw = love.graphics.draw,
        draw_layer = love.graphics.drawLayer,
        draw_quad = love.graphics.drawq,
        ellipse = love.graphics.ellipse,
        flush_batch = love.graphics.flushBatch,
        line = love.graphics.line,
        point = love.graphics.point,
        points = love.graphics.points,
        polygon = love.graphics.polygon,
        present = love.graphics.present,
        print = love.graphics.print,
        printf = love.graphics.printf,
        quad = love.graphics.quad,
        stencil = love.graphics.stencil,
        triangle = love.graphics.triangle,

        capture_screenshot = love.graphics.captureScreenshot,
        new_array_image = love.graphics.newArrayImage,
        new_canvas = love.graphics.newCanvas,
        new_cube_image = love.graphics.newCubeImage,
        new_font = love.graphics.newFont,
        new_framebuffer = love.graphics.newFramebuffer,
        new_image = love.graphics.newImage,
        new_image_font = love.graphics.newImageFont,
        new_mesh = love.graphics.newMesh,
        new_particle_system = love.graphics.newParticleSystem,
        new_pixel_effect = love.graphics.newPixelEffect,
        new_quad = love.graphics.newQuad,
        new_screenshot = love.graphics.newScreenshot,
        new_shader = love.graphics.newShader,
        new_sprite_batch = love.graphics.newSpriteBatch,
        new_stencil = love.graphics.newStencil,
        new_text = love.graphics.newText,
        new_video = love.graphics.newVideo,
        new_volume_image = love.graphics.newVolumeImage,
        set_new_font = love.graphics.setNewFont,
        validate_shader = love.graphics.validateShader,

        get_background_color = love.graphics.getBackgroundColor,
        get_blend_mode = love.graphics.getBlendMode,
        get_canvas = love.graphics.getCanvas,
        get_color = love.graphics.getColor,
        get_color_mask = love.graphics.getColorMask,
        get_color_mode = love.graphics.getColorMode,
        get_default_filter = love.graphics.getDefaultFilter,
        get_default_image_filter = love.graphics.getDefaultImageFilter,
        get_depth_mode = love.graphics.getDepthMode,
        get_font = love.graphics.getFont,
        get_front_face_winding = love.graphics.getFrontFaceWinding,
        get_line_join = love.graphics.getLineJoin,
        get_line_stipple = love.graphics.getLineStipple,
        get_line_style = love.graphics.getLineStyle,
        get_scissor = love.graphics.getScissor,
        get_shader = love.graphics.getShader,
        get_stack_depth = love.graphics.getStackDepth,
        get_stencil_test = love.graphics.getStencilTest,
        intersect_scissor = love.graphics.intersectScissor,
        is_active = love.graphics.isActive,
        is_grammar_correct = love.graphics.isGrammarCorrect,
        is_supported = love.graphics.isSupported,
        is_wireframe = love.graphics.isWireframe,
        reset = love.graphics.reset,
        set_background_color = love.graphics.setBackgroundColor,
        set_blend_mode = love.graphics.setBlendMode,
        set_canvas = love.graphics.setCanvas,
        set_color_mask = love.graphics.setColorMask,
        set_color_mode = love.graphics.setColorMode,
        set_default_filter = love.graphics.setDefaultFilter,
        set_default_image_filter = love.graphics.setDefaultImageFilter,
        set_depth_mode = love.graphics.setDepthMode,
        set_font = love.graphics.setFont,
        set_front_face_winding = love.graphics.setFrontFaceWinding,
        set_inverted_stencil = love.graphics.setInvertedStencil,
        set_line = love.graphics.setLine,
        set_line_join = love.graphics.setLineJoin,
        set_line_stipple = love.graphics.setLineStipple,
        set_line_width = love.graphics.setLineWidth,
        set_mesh_cull_mode = love.graphics.setMeshCullMode,
        set_pixel_effect = love.graphics.setPixelEffect,
        set_point = love.graphics.setPoint,
        set_point_size = love.graphics.setPointSize,
        set_point_style = love.graphics.setPointStyle,
        set_render_target = love.graphics.setRenderTarget,
        set_scissor = love.graphics.setScissor,
        set_shader = love.graphics.setShader,
        set_stencil = love.graphics.setStencil,
        set_stencil_test = love.graphics.setStencilTest,
        set_wireframe = love.graphics.setWireframe,

        apply_transform = love.graphics.applyTransform,
        inverse_transform_point = love.graphics.inverseTransformPoint,
        origin = love.graphics.origin,
        pop = love.graphics.pop,
        push = love.graphics.push,
        replace_transform = love.graphics.replaceTransform,
        rotate = love.graphics.rotate,
        scale = love.graphics.scale,
        shear = love.graphics.shear,
        transform_point = love.graphics.transformPoint,
        translate = love.graphics.translate,

        check_mode = love.graphics.checkMode,
        get_caption = love.graphics.getCaption,
        get_DPI_scale = love.graphics.getDPIScale,
        get_dimensions = love.graphics.getDimensions,
        get_height = love.graphics.getHeight,
        get_mode = love.graphics.getMode,
        get_modes = love.graphics.getModes,
        get_pixel_dimensions = love.graphics.getPixelDimensions,
        get_pixel_height = love.graphics.getPixelHeight,
        get_pixel_width = love.graphics.getPixelWidth,
        get_width = love.graphics.getWidth,
        has_focus = love.graphics.hasFocus,
        is_created = love.graphics.isCreated,
        set_caption = love.graphics.setCaption,
        set_mode = love.graphics.setMode,
        toggle_fullscreen = love.graphics.toggleFullscreen,

        get_canvas_formats = love.graphics.getCanvasFormats,
        get_compressed_image_formats = love.graphics.getCompressedImageFormats,
        get_image_formats = love.graphics.getImageFormats,
        get_max_image_size = love.graphics.getMaxImageSize,
        get_max_point_size = love.graphics.getMaxPointSize,
        get_renderer_info = love.graphics.getRendererInfo,
        get_stats = love.graphics.getStats,
        get_supported = love.graphics.getSupported,
        get_system_limit = love.graphics.getSystemLimit,
        get_system_limits = love.graphics.getSystemLimits,
        get_texture_types = love.graphics.getTextureTypes,

        AlignMode = love.graphics.AlignMode,
        ArcType = love.graphics.ArcType,
        AttributeDataType = love.graphics.AttributeDataType,
        BlendAlphaMode = love.graphics.BlendAlphaMode,
        BlendMode = love.graphics.BlendMode,
        BufferDataUsage = love.graphics.BufferDataUsage,
        CanvasFormat = love.graphics.CanvasFormat,
        ColorMode = love.graphics.ColorMode,
        CompareMode = love.graphics.CompareMode,
        CullMode = love.graphics.CullMode,
        DrawMode = love.graphics.DrawMode,
        FilterMode = love.graphics.FilterMode,
        GraphicsFeature = love.graphics.GraphicsFeature,
        GraphicsLimit = love.graphics.GraphicsLimit,
        IndexDataType = love.graphics.IndexDataType,
        LineJoin = love.graphics.LineJoin,
        LineStyle = love.graphics.LineStyle,
        MeshDrawMode = love.graphics.MeshDrawMode,
        MipmapMode = love.graphics.MipmapMode,
        PixelFormat = love.graphics.PixelFormat,
        PointStyle = love.graphics.PointStyle,
        StackType = love.graphics.StackType,
        StencilAction = love.graphics.StencilAction,
        TextureFormat = love.graphics.TextureFormat,
        TextureType = love.graphics.TextureType,
        VertexAttributeStepMode = love.graphics.VertexAttributeStepMode,
        VertexWinding = love.graphics.VertexWinding,
        WrapMode = love.graphics.WrapMode,
    }
    backend.mouse = {
        isDown = love.mouse.isDown, -- Changed is_down to isDown to match LÃ–VE's API
    }
    backend.event = {
        clear = love.event.clear,
        poll = love.event.poll,
        pump = love.event.pump,
        quit = love.event.quit,
        wait = love.event.wait,
    }
    backend.data = {
        compress = love.data.compress,
        decode = love.data.decode,
        decompress = love.data.decompress,
        encode = love.data.encode,
        get_packed_size = love.data.getPackedSize,
        hash = love.data.hash,
        new_byte_data = love.data.newByteData,
        new_data_view = love.data.newDataView,
        pack = love.data.pack,
        unpack = love.data.unpack,
    }
    backend.audio = {
        get_active_effects = love.audio.getEffects,
        get_active_source_count = love.audio.getActiveSourceCount,
        get_distance_model = love.audio.getDistanceModel,
        get_doppler_scale = love.audio.getDopplerScale,
        get_effect = love.audio.getEffect,
        get_max_scene_effects = love.audio.getMaxSceneEffects,
        get_max_source_effects = love.audio.getMaxSourceEffects,
        get_num_sources = love.audio.getNumSources,
        get_orientation = love.audio.getOrientation,
        get_position = love.audio.getPosition,
        get_recording_devices = love.audio.getRecordingDevices,
        get_source_count = love.audio.getSourceCount,
        get_velocity = love.audio.getVelocity,
        get_volume = love.audio.getVolume,
        is_effects_supported = love.audio.isEffectsSupported,
        new_queueable_source = love.audio.newQueueableSource,
        new_source = love.audio.newSource,
        pause = love.audio.pause,
        play = love.audio.play,
        resume = love.audio.resume,
        rewind = love.audio.rewind,
        set_distance_model = love.audio.setDistanceModel,
        set_doppler_scale = love.audio.setDopplerScale,
        set_effect = love.audio.setEffect,
        set_mix_with_system = love.audio.setMixWithSystem,
        set_orientation = love.audio.setOrientation,
        set_position = love.audio.setPosition,
        set_velocity = love.audio.setVelocity,
        set_volume = love.audio.setVolume,
        stop = love.audio.stop,
        DistanceModel = love.audio.DistanceModel,
        EffectType = love.audio.EffectType,
        EffectWaveform = love.audio.EffectWaveform,
        SourceType = love.audio.SourceType,
        TimeUnit = love.audio.TimeUnit,
    }
    backend.font = {
        FontData = love.font.FontData,
        GlyphData = love.font.GlyphData,
        Rasterizer = love.font.Rasterizer,

        new_BM_font_rasterizer = love.font.newBMFontRasterizer,
        new_font_data = love.font.newFontData,
        new_glyph_data = love.font.newGlyphData,
        new_image_rasterizer = love.font.newImageRasterizer,
        new_true_type_rasterizer = love.font.newTrueTypeRasterizer,

        HintingMode = love.font.HintingMode,
        PixelFormat = love.font.PixelFormat,
    }
    backend.filesystem = {
        Dropped_File = love.filesystem.DroppedFile,
        FileData = love.filesystem.FileData,
        File = love.filesystem.File,

        append = love.filesystem.append,
        are_symlinks_enabled = love.filesystem.areSymlinksEnabled,
        create_directory = love.filesystem.createDirectory,
        enumerate = love.filesystem.enumerate,
        exists = love.filesystem.exists,
        get_appdata_directory = love.filesystem.getAppdataDirectory,
        get_c_require_path = love.filesystem.getCRequirePath,
        get_directory_items = love.filesystem.getDirectoryItems,
        get_identity = love.filesystem.getIdentity,
        get_info = love.filesystem.getInfo,
        get_last_modified = love.filesystem.getLastModified,
        get_real_directory = love.filesystem.getRealDirectory,
        get_require_path = love.filesystem.getRequirePath,
        get_save_directory = love.filesystem.getSaveDirectory,
        get_size = love.filesystem.getSize,
        get_source = love.filesystem.getSource,
        get_source_base_directory = love.filesystem.getSourceBaseDirectory,
        get_user_directory = love.filesystem.getUserDirectory,
        get_working_directory = love.filesystem.getWorkingDirectory,
        init = love.filesystem.init,
        is_directory = love.filesystem.isDirectory,
        is_file = love.filesystem.isFile,
        is_fused = love.filesystem.isFused,
        is_symlink = love.filesystem.isSymlink,
        lines = love.filesystem.lines,
        load = love.filesystem.load,
        mkdir = love.filesystem.mkdir,
        mound = love.filesystem.mound,
        new_file = love.filesystem.newFile,
        new_file_data = love.filesystem.newFileData,
        read = love.filesystem.read,
        remove = love.filesystem.remove,
        set_c_require_path = love.filesystem.setCRequirePath,
        set_source = love.filesystem.setSource,
        set_symlinks_enabled = love.filesystem.setSymlinksEnabled,
        unmount = love.filesystem.unmount,
        write = love.filesystem.write,

        FileDecoder = love.filesystem.FileDecoder,
        FileMode = love.filesystem.FileMode,
        FileType = love.filesystem.FileType,
    }
    backend.image = love.image
    backend.joystick = love.joystick
    backend.keyboard = love.keyboard
    backend.math = love.math
    backend.physics = love.physics
    backend.sound = love.sound
    backend.system = love.system
    backend.timer = love.timer
    backend.thread = love.thread
    backend.touch = love.touch
    backend.video = love.video
    backend.window = love.window
end

return backend
